import{r as n,j as t}from"./index-o7lPNwqm.js";import{R as x,B as a,E as p}from"./RenderCount-B4iajQsF.js";const C=n.createContext(0),l=n.createContext(0),s=n.createContext(()=>{});function j({children:e}){const[o,d]=n.useReducer((r,c)=>{if(c.type==="INC1")return{...r,count1:r.count1+1};if(c.type==="INC2")return{...r,count2:r.count2+1};throw new Error("no matching action")},{count1:0,count2:0});return t.jsx(C.Provider,{value:o.count1,children:t.jsx(l.Provider,{value:o.count2,children:t.jsx(s.Provider,{value:d,children:e})})})}function u(){const e=n.useContext(C),o=n.useContext(s);return t.jsxs("div",{className:"flex gap-2",children:["Count1: ",e,t.jsx(x,{}),t.jsx(a,{onClick:()=>o({type:"INC1"}),children:"+1"})]})}function i(){const e=n.useContext(l),o=n.useContext(s);return t.jsxs("div",{className:"flex gap-2",children:["Count2: ",e,t.jsx(x,{}),t.jsx(a,{onClick:()=>o({type:"INC2"}),children:"+1"})]})}function h(){return t.jsxs(t.Fragment,{children:[t.jsx("p",{children:"Solution 2: useReducer를 사용하여 상태를 하나로 관리하고, 여러 개의 Context를 전파합니다"}),t.jsx(u,{}),t.jsx(u,{}),t.jsx(i,{}),t.jsx(i,{})]})}const g=function(){return t.jsx(p,{title:"Creating one state with useReducer and propagating with multiple Contexts",children:t.jsx(j,{children:t.jsx(h,{})})})};export{g as component};
