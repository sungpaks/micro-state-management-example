import{j as t}from"./index-De3ncoji.js";import{E as n}from"./RenderCount-B8fS81nH.js";import{E as o}from"./ExampleLink-BXefO2fA.js";import{C as r,a as e,b as i,c as s,d as a,e as x}from"./Counter3-pQpTGKXp.js";function c(){return t.jsxs(t.Fragment,{children:[t.jsx(r,{}),t.jsx(r,{}),t.jsx(e,{}),t.jsx(e,{}),t.jsx(i,{}),t.jsx(i,{}),t.jsx("br",{}),t.jsxs("p",{children:["아래와 같이 (Context 생성) + (Provider 컴포넌트 생성) + (커스텀훅 생성)을 모두 책임지는 팩토리인"," ",t.jsx("code",{children:"createStateContext"}),"를 만들었습니다."]}),t.jsx("img",{src:"https://i.imgur.com/7EbKgID.png",alt:"팩토리 패턴 예제 코드"}),t.jsx("p",{children:"이제 이 팩토리 함수를 사용하면 아래와 같이 반복 코드를 크게 줄일 수 있습니다."}),t.jsx("img",{src:"https://i.imgur.com/CyW6943.png",alt:"팩토리 패턴 사용 예제 코드"}),t.jsx("br",{}),t.jsx("p",{children:"하지만 아직도 신경쓰이는 단점은, Context를 생성할 수록 Provider 컴포넌트가 많이 중첩된다는 점입니다."}),t.jsx("img",{src:"https://i.imgur.com/nAVgwwQ.png",alt:"중첩된 Provider 문제"}),t.jsx("p",{children:"이 문제를 해결하는 방법은 다음 섹션에서 알아봅니다."}),t.jsx(o,{to:"/sharing-component-state-with-context/avoiding-provider-nesting-with-reduce-right",children:"다음"})]})}const h=function(){return t.jsxs(n,{title:"Factory pattern with a custom hook",children:[t.jsx("h1",{children:"직전에 살펴본 커스텀 훅과 Provider 컴포넌트의 생성을 Factory Pattern으로 자동화합니다."}),t.jsx(s,{initialValue:10,children:t.jsx(a,{initialValue:20,children:t.jsx(x,{initialValue:30,children:t.jsx(c,{})})})})]})};export{h as component};
